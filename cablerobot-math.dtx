% \iffalse meta-comment
%
% Copyright (C) 2019--2020 by Philipp Tempel <p.tempel@tudelft.nl>
% -------------------------------------------------------
% 
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX 
% version 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{cablerobot-math.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[2005/12/01]
%<package>\ProvidesPackage{cablerobot-math}
%<*package>
    [2020/02/11 v1.0.0 Cable Robots Math]
%</package>
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{hyperref}
\usepackage{cablerobot-math}
\CodelineIndex
\EnableCrossrefs
\RecordChanges
\begin{document}
  \DocInput{cablerobot-math.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v1.0}{2019/12/07}{Initial version}
%
% \GetFileInfo{cablerobot-math.dtx}
%
% \DoNotIndex{\!,\,,\:,\bm,\bullet,\cdot,\cr,\crossp@inner,\ddot,\DeclareMathOperator,\DeclarePairedDelimiterX,\def,\dfrac,\dot,\dotp@inner,\dotsc,\frac,\hat,\ifblank,\IfBooleanTF,\IfValueT,\IfValueTF,\infty,\lbrace,\lparen,\lVert,\lvert,\mathinner,\mathrm,\mathsf,\mbox,\mkern,\ndot,\ProvideDocumentCommand,\ooalign,\operatorname,\otimes,\outerp@inner,\overline,\partial,\PassOptionsToPackage,\phantom,\prescripts,\rbrace,\renewcommand,\RequirePackage,\rparen,\runner,\rVert,\rvert,\SavedStyle,\smaller,\text,\textscale,\tfrac,\ThisStyle,\times,\top,\{,\},\adj,\bigo,\Delta,\delta,\dots,\else,\epsilon,\fi,\horzbar,\ifdefined,\innerp@inner,\interval,\langle,\lceil,\left,\leet,\lfloor,\mathbb,\mathcal,\mathds,\mathop,\nabla,\newcommand,\nl,\numlist,\prescript,\prime,\ProcessList,\rangle,\rceil,\rfloor,\right,\rule,\SI,\si,\SIlist,\SIrange,\SO,\SplitList,\Theta,\varepsilon,\vectsetitem,\vectsetitema,\vertbar,}
% 
%
% \title{The \textsf{cablerobot-math} package\thanks{This document
%   corresponds to \textsf{cablerobot-math}~\fileversion, dated \filedate.}}
% \author{Philipp Tempel \\ \texttt{p.tempel@tudelft.nl}}
%
% \maketitle
%
% \section{Introduction}
%
% Put text here.
%
% \section{Usage}
%
% Put text here.
%
% \DescribeMacro{\dummyMacro}
% This macro does nothing. It is merely an example.  If this were a real macro,
% you would put a paragraph here describing what the macro is supposed to do,
% what its mandatory and optional arguments are, and so forth.
%
% \DescribeEnv{dummyEnv}
% This environment does nothing.  It is merely an example.
% If this were a real environment, you would put a paragraph here
% describing what the environment is supposed to do, what its
% mandatory and optional arguments are, and so forth.
%
% \StopEventually{}
%
% \section{Implementation}
%
% First, we need to load some dependencies
%
%
% The package is a toolbox of programming facilities geared primarily towards
% LaTeX class and package authors. It provides LaTeX frontends to some of the
% new primitives provided by e-TeX as well as some generic tools which are not
% strictly related to e-TeX but match the profile of this package. Note that the
% initial versions of this package were released under the name elatex. The
% package provides functions that seem to offer alternative ways of implementing
% some LaTeX kernel commands; nevertheless, the package will not modify any part
% of the LaTeX kernel.
%    \begin{macrocode}
\RequirePackage{etoolbox}
%    \end{macrocode}
%
% xparse – A generic document command parser
% The package provides a high-level interface for producing document-level
% commands. In that way, it offers a replacement for LaTeX2e’s |\newcommand|
% macro, with significantly improved functionality.
% The package is distributed as part of the l3packages bundle.
%    \begin{macrocode}
\RequirePackage{xparse}
%    \end{macrocode}
%
% Set the font size relative to the current font size. The basic command of the
% package is |\relsize|, whose argument is a number of |\magsteps| to change
% size; from this are defined commands |\larger|, |\smaller|, |\textlarger|,
% etc.
%    \begin{macrocode}
\RequirePackage{relsize}
%    \end{macrocode}
%
% Mathtools provides a series of packages designed to enhance the appearance of
% documents containing a lot of mathematics. The main backbone is amsmath, so
% those unfamiliar with this required part of the LaTeX system will probably not
% find the packages very useful. Mathtools provides many useful tools for
% mathematical typesetting. It is based on amsmath and fixes various
% deficiencies of amsmath and standard LaTeX. It provides:
% * Extensible symbols, such as brackets, arrows, harpoons, etc.;
% * Various symbols such as |\coloneqq| (:=);
% * Easy creation of new tag forms;
% * Showing equation numbers only for referenced equations;
% * Extensible arrows, harpoons and hookarrows;
% * Starred versions of the amsmath matrix environments for specifying the
%   column alignment;
% * More building blocks: multlined, cases-like environments, new gathered
%   environments;
% * Maths versions of |\makebox|, |\llap|, |\rlap| etc.;
% * Cramped math styles; and more...
%    \begin{macrocode}
% \RequirePackage{mathtools}
%    \end{macrocode}
%
% amsmath – AMS mathematical facilities for LaTeX
% The principal package in the AMS-LaTeX distribution. It adapts for use in
% LaTeX most of the mathematical features found in AMS-TeX; it is highly
% recommended as an adjunct to serious mathematical typesetting in LaTeX.
% When amsmath is loaded, AMS-LaTeX packages amsbsy (for bold symbols), amsopn
% (for operator names) and amstext (for text embedded in mathematics) are also
% loaded.
% amsmath is part of the LaTeX required distribution; however, several
% contributed packages add still further to its appeal; examples are empheq,
% which provides functions for decorating and highlighting mathematics, and
% ntheorem, for specifying theorem (and similar) definitions. 
%    \begin{macrocode}
\RequirePackage{amsmath}
%    \end{macrocode}
%
% doublestroke – Typeset mathematical double stroke symbols
% A font based on Computer Modern Roman useful for typesetting the mathematical
% symbols for the natural numbers (N), whole numbers (Z), rational numbers (Q),
% real numbers (R) and complex numbers (C); coverage includes all Roman capital
% letters, ‘1’, ‘h’ and ‘k’. The font is available both as METAFONT source and
% in Adobe Type 1 format, and LaTeX macros for its use are provided.
% The fonts appear in the blackboard bold sampler. 
% For a full list of additional math symbols, see
% \url{http://milde.users.sourceforge.net/LUCR/Math/mathpackages/dsfont-symbols.pdf}
%    \begin{macrocode}
\RequirePackage{dsfont}
%    \end{macrocode}
%
% The bm package defines a command |\bm| which makes its argument bold. The
% argument may be any maths object from a single symbol to an expression. This
% is closely related to the specification of the |\boldsymbol| command in
% AMS-LaTeX, but |\bm| is rather more careful in the way it does things.
%    \begin{macrocode}
\RequirePackage{bm}
%    \end{macrocode}
%
% A comprehensive (SI) units package. Typesetting values with units requires
% care to ensure that the combined mathematical meaning of the value plus unit
% combination is clear. In particular, the SI units system lays down a
% consistent set of units with rules on how they are to be used. However,
% different countries and publishers have differing conventions on the exact
% appearance of numbers (and units). A number of LaTeX packages have been
% developed to provide consistent application of the various rules: SIunits,
% sistyle, unitsdef and units are the leading examples. The numprint package
% provides a large number of number-related functions, while dcolumn and rccol
% provide tools for typesetting tabular numbers. The siunitx package takes the
% best from the existing packages, and adds new features and a consistent
% interface. A number of new ideas have been incorporated, to fill gaps in the
% existing provision. The package also provides backward-compatibility with
% SIunits, sistyle, unitsdef and units. The aim is to have one package to handle
% all of the possible unit-related needs of LaTeX users. The package relies on
% LaTeX 3 support from the l3kernel and l3packages bundles.
%    \begin{macrocode}
\PassOptionsToPackage{%
% General styling
    multi-part-units=brackets,%
    zero-decimal-to-integer=false,%
    add-decimal-zero=false,%
    add-integer-zero=true,%
    per-mode=reciprocal,%
% Rounding
    round-mode=places,%
    round-precision=3,%
    round-half=even,%
% Products |\SI{1x2x3}|
    product-units=power,%
% Ranges |\SIrange|
    range-units=brackets,%
% Lists |\SIlist|
    list-units=brackets,%
% Tables
    table-unit-alignment=left,%
  }{siunitx}
\RequirePackage{siunitx}
%    \end{macrocode}
%
% The dcolumn package makes use of the array package to define a "D" column
% format for use in tabular environments. This package is part of the tools
% bundle in the LaTeX required distribution.
%    \begin{macrocode}
\RequirePackage{dcolumn}
%    \end{macrocode}
%
% Typeset in-line fractions in a "nice" way. The package typesets fractions
% "nicely" - in the form 'a/b' (i.e., staggered with a slash between them,
% rather than directly one over the other). The package is distributed as part
% of a bundle including the units package. Nicefrac's facilities are provided,
% in a cleaner way, by the (experimental) xfrac package, but see also the faktor
% package for quotient spaces and the like.
%    \begin{macrocode}
\RequirePackage{nicefrac}
%    \end{macrocode}
%
% fouridx - Left sub- and superscripts in maths mode The package enables left
% subscripts and superscripts in maths mode. The sub- and superscripts are
% raised for optimum fitting to the symbol indexed, in such a way that left
% and right sub- and superscripts are set on the same level, as appropriate.
% The package provides an alternative to the use of the |\sideset| command in
% the amsmath package.
%    \begin{macrocode}
\RequirePackage{fouridx}
%    \end{macrocode}
%
% Place lines through maths formulae. A package to draw diagonal lines
% ("cancelling" a term) and arrows with limits (cancelling a term "to a value")
% through parts of maths formulae.
%    \begin{macrocode}
\RequirePackage{cancel}
%    \end{macrocode}
%
% EMPHasizing EQuations. The empheq package is part of the mathtools bundle. The
% package provides a visual markup extension to amsmath. The user-friendly
% interface allows the user to put a set of equations inside a box thus
% enhancing the |\boxed| feature of amsmath. As a side effect it's also possible
% to add material on both sides of the equations thus providing (and surpassing)
% the functionality of the cases package. Users of ntheorem will probably want
% to have a look at it as well, since the problem with end-of-theorem marks in
% gather and other environments can be circumvented using empheq.
%    \begin{macrocode}
\RequirePackage{empheq}
%    \end{macrocode}
%
% Provides macros to typeset bra-ket notation, as well as set specifiers, with a
% single bar, a double bar, or vertical bar specifier in between two bracketed
% parts. Each macro comes in a fixed-size version and an expanding version. If
% the package finds itself operating under e-tex, it uses the extended primitive
% |\middle| for more reliable results
%    \begin{macrocode}
\RequirePackage{braket}
%    \end{macrocode}
%
%  When typing an open interval as $]a,b[$, a closing bracket is being used in
%  place of an opening fence and vice versa. This leads to the wrong spacing in,
%  say, $]-a,b[$ or $A \in ]a,b[ = B$. The package attempts to solve this using
%
%  |\interval{a}{b}| yields $\interval{a}{b}$
%
%  |\interval[open]{a}{b}| yields $\interval[open]{a}{b}$
%
%  |\interval[open left]{a}{b}| yields $\interval[open left]{a}{b}$
%
% The package also supports fence scaling and ensures that the enclosing fences
% will end up having the proper closing and opening types. TeX maths does not do
% this job properly.
%    \begin{macrocode}
\RequirePackage{interval}
%    \end{macrocode}
%
%
% \begin{macro}{\ProvideMathOperator}
% \cmd{\ProvideMathOperator}\marg{opname}\marg{text}
% Maybe not the cleanest way, but we shall also provide a |\ProvideMathOperator|
% macro that allows to define math operators in a fail-safe way i.e., work like
% |\providecommand|
%    \begin{macrocode}
\newcommand\ProvideMathOperator[2]{%
  \ifdefined#1%
  \else%
    \DeclareMathOperator{#1}{#2}%
  \fi%
}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\parentheses}
% \cmd{\parentheses}\marg{content} wraps its |<content>| into curly
% parentheses. See the |mathtools| package for implementation details.
%    \begin{macrocode}
\DeclarePairedDelimiterX{\parentheses}[1]{\lparen}{\rparen}{%
  \ifblank{#1}{\cdot}{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\cparentheses}
% \cmd{\cparentheses}\marg{content} wraps its |<content>| into curly
% parentheses. See the |mathtools| package for implementation details.
%    \begin{macrocode}
\DeclarePairedDelimiterX{\cparentheses}[1]{\lbrace}{\rbrace}{%
  \ifblank{#1}{\cdot}{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ceil}
% \cmd{\ceil}\marg{value} writes math operator for ceiling |<value>|. See the
% |mathtools| package for implementation details.
%    \begin{macrocode}
\DeclarePairedDelimiterX{\ceil}[1]{\lceil}{\rceil}{%
  \ifblank{#1}{\:\cdot\:}{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\floor}
% \cmd{\floor}\marg{value} writes math operator for flooring |<value>|. See
% the |mathtools| package for implementation details.
%    \begin{macrocode}
\DeclarePairedDelimiterX{\floor}[1]{\lfloor}{\rfloor}{%
  \ifblank{#1}{\:\cdot\:}{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\lerp}
% \cmd{\lerp}\oarg{var}\marg{start}\marg{end} writes linear interpolation
% of two functions |<start>| and |<end>| and running variable |<var>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\lerp}{ O{t} m m }{%
  \parentheses*{%
    1%
    -%
    #1%
  } \,%
  #2%
  +%
  #1 \,%
  #3%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\of}
% \cmd{\cof}\marg{arguments} writes the ``function of ...'' argument with
% conventional parentheses.\\
% \cmd{\cof}\oarg{<parens size>}\marg{arguments} sets the parentheses size to
% |<parens size>|\\
% \cmd{\cof}*\oarg{<parens size>}\marg{arguments} auto-scales the size of the
% braces.
%    \begin{macrocode}
\ProvideDocumentCommand{\of}{ s o m }{%
  \mkern-1.0mu%
  \IfBooleanTF{#1}{%
    \IfValueTF{#2}{%
      \parentheses*[#2]{#3}%
    }{%
      \parentheses*{#3}%
    }%
  }{%
    \IfValueTF{#2}{%
      \parentheses[#2]{#3}%
    }{%
      \parentheses{#3}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\cof}
% \cmd{\cof}\marg{arguments} writes the ``function of ...'' argument with
% curly parentheses.\\
% \cmd{\cof}\oarg{<parens size>}\marg{arguments} sets the parentheses size to
% |<parens size>|\\
% \cmd{\cof}*\oarg{<parens size>}\marg{arguments} auto-scales the size of the
% braces.
%    \begin{macrocode}
\ProvideDocumentCommand{\cof}{ s o m }{%
  \mkern-1.0mu%
  \IfBooleanTF{#1}{%
    \IfValueTF{#2}{%
      \cparentheses*[#2]{#3}%
    }{%
      \cparentheses*{#3}%
    }%
  }{%
    \IfValueTF{#2}{%
      \cparentheses[#2]{#3}%
    }{%
      \cparentheses{#3}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\overlinebm}
% \cmd{\overlinebm}\marg{var} writes an overlined bold font variable.
%    \begin{macrocode}
\ProvideDocumentCommand{\overlinebm}{ m }{%
  \ThisStyle{\ooalign{%
    $\SavedStyle\mkern2.5mu\overline{\phantom{\mathrm{#1}}}$\cr$\SavedStyle\bm{{#1}}$%
  }}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\overlinevect}
% \cmd{\overlinevect}\marg{content} writes an overlined bold font vector.
%    \begin{macrocode}
\ProvideDocumentCommand{\overlinevect}{ m }{%
  \overlinebm{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\overlinematr}
% \cmd{\overlinematr}\marg{content} writes an overlined bold font matrix.
%    \begin{macrocode}
\ProvideDocumentCommand{\overlinematr}{ m }{
  \overlinebm{#1}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\vect}
% \cmd{\vect}\marg{var} writes the vector representation of |<var>|
% which defaults to |\bm{var}|.\\
% \cmd{\vect}\oarg{sub}\marg{var} prepends subscript |<sub>| to the
% vector\\
% \cmd{\vect}\oarg{sub}\oarg{sup}\marg{var} also prepends
% superscript |<sup>| to the vector.
%    \begin{macrocode}
\ProvideDocumentCommand{\vect}{ o O{} m }{%
  \IfValueTF{#1}{%
    \prescript{#1}{#2}{\bm{#3}}%
  }{%
    \bm{#3}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dotvect}
% \cmd{\dotvect}\marg{var} writes a proper single-dotted vector with the
% dot not written bold, only the vector component written as |\vect{var}|.\\
% \cmd{\dotvect}\oarg{sub}\marg{var} see |\vect[sub]{var}|\\
% \cmd{\dotvect}\oarg{sub}\oarg{sup}\marg{var} see |\vect[sub][sup]{var}|
%    \begin{macrocode}
\ProvideDocumentCommand{\dotvect}{ o O{} m }{%
  \IfValueTF{#1}{%
    \prescript{#1}{#2}{\dot{\vect{#3}}}%
  }{%
    \dot{\vect{#3}}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ddotvect}
% \cmd{\ddotvect}\marg{var} writes a proper double-dotted vector with the
% dot not written bold, only the vector component written as |\vect{var}|.\\
% \cmd{\ddotvect}\oarg{sub}\marg{var} see |\vect[sub]{var}|\\
% \cmd{\ddotvect}\oarg{sub}\oarg{sup}\marg{var} see |\vect[sub][sup]{var}|
%    \begin{macrocode}
\ProvideDocumentCommand{\ddotvect}{ o O{} m }{%
  \IfValueTF{#1}{%
    \prescript{#1}{#2}{\ddot{\vect{#3}}}%
  }{%
    \ddot{\vect{#3}}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ndot}
% \cmd{\ndot}\marg{num}\marg{var} writes the |<num>|-th derivative of
% |<var>|\\
% \cmd{\ndot}*\marg{num}\marg{var} auto-scales the parentheses.
%    \begin{macrocode}
\ProvideDocumentCommand{\ndot}{ s m m }{%
  \IfBooleanTF{#1}{%
    #3^{\parentheses*{#2}}%
  }{%
    #3^{\parentheses{#2}}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\pr}
% \cmd{\pr}\marg{var} writes the first prime-derivative of |<var>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\pr}{ m }{%
  #1^{\prime}\mkern-1.2mu%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ppr}
% \cmd{\ppr}\marg{var} writes the second prime-derivative of |<var>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\ppr}{ m }{%
  #1^{\prime\prime}\mkern-1.2mu%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\pppr}
% \cmd{\pppr}\marg{var} writes the third prime-derivative of |<var>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\pppr}{ m }{%
  #1^{\prime\prime\prime}\mkern-1.2mu%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\jacobian}
% \cmd{\jacobian}\marg{var} applies the Jacobian operator to argument |<var>|\\
% \cmd{\jacobian}\oarg{sub}\marg{var} prepends subscript |<var>| to the
% Jacobian operator\\
% \cmd{\jacobian}\oarg{sub}\oarg{sup}\marg{var} also prepends superscript
% |<sup>| to the Jacobian operator\\
% \cmd{\jacobian}*\oarg{sub}\oarg{sup}\marg{var} adds and auto-scales
% parentheses |<var>|
%    \begin{macrocode}
\ProvideDocumentCommand{\jacobian}{ s o O{} m }{%
  \jacobiansymbol%
  \IfValueT{#2}{_{#2}^{#3}}%
  \mkern-1.0mu%
  \IfBooleanTF{#1}{%
    \parentheses*{#4}%
  }{%
    #4%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dotjacobian}
% \cmd{\dotjacobian}\marg{var} first time-derivative of the jacobian of
% |<var>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\dotjacobian}{ m }{%
  \dot{\jacobiansymbol}\mkern-1.0mu#1%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ddotjacobian}
% \cmd{\ddotjacobian}\marg{var} second time-derivative of the jacobian of
% |<var>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\ddotjacobian}{ m }{%
  \ddot{\jacobiansymbol}\mkern-1.0mu#1%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\eye}
% \cmd{\eye} unit-matrix.
%    \begin{macrocode}
\ProvideDocumentCommand{\eye}{ }{%
  \mathbb{I}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\zeros}
% \cmd{\zeros} zero-matrix.
%    \begin{macrocode}
\ProvideDocumentCommand{\zeros}{ o }{%
  \mathds{O}%\IfValueT{#1}{_{#1}}{}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ones}
% \cmd{\ones} ones-matrix.
%    \begin{macrocode}
\ProvideDocumentCommand{\ones}{ o }{%
  \IfValueTF{#1}{%
    \mathbb{1}_{#1}%
  }{%
    \mathbb{1}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ndotvect}
% \cmd{\ndotvect}\marg{num}\marg{vect} |<num>|-th time-derivative of vector
% |<vect>|.\\
% \cmd{\ndotvect}\oarg{sub}\marg{num}\marg{vect} prepends subscript
% |<sub>|.\\
% \cmd{\ndotvect}\oarg{sub}\oarg{sup}\marg{num}\marg{vect} also prepends
% superscript |<sup>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\ndotvect}{ o O{} m m }{%
  \IfValueTF{#1}{%
    \prescript{#1}{#2}{\ndot{#3}{\vect{#4}}}%
  }{%
    \ndot{#3}{\vect{#4}}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\matr}
% \cmd{\matr}\marg{matrix} writes |<matrix>| formatted as matrix.\\
% \cmd{\matr}\oarg{sub}\marg{matrix} prepends subscript |<sub>|.\\
% \cmd{\matr}\oarg{sub}\oarg{sup}\marg{matrix} also prepends superscript
% |<sup>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\matr}{ o O{} m }{%
  \IfValueTF{#1}{%
    \prescript{#1}{#2}{\bm{#3}}%
  }{%
    \bm{#3}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dotmatr}
% \cmd{\dotmatr}\marg{matrix} writes |<matrix>| formatted as matrix with its
% first time-derivative indiciator.\\
% \cmd{\dotmatr}\oarg{sub}\marg{matrix} prepends subscript |<sub>|.\\
% \cmd{\dotmatr}\oarg{sub}\oarg{sup}\marg{matrix} also prepends
% superscript |<sup>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\dotmatr}{ o O{} m }{%
  \IfValueTF{#1}{%
    \prescript{#1}{#2}{\dot{\matr{#3}}}%
  }{%
    \dot{\matr{#3}}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ddotmatr}
% \cmd{\ddotmatr}\marg{matrix} writes |<matrix>| formatted as matrix with its
% second time-derivative indiciator.\\
% \cmd{\ddotmatr}\oarg{sub}\marg{matrix} prepends subscript |<sub>|.\\
% \cmd{\ddotmatr}\oarg{sub}\oarg{sup}\marg{matrix} also prepends
% superscript |<sup>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\ddotmatr}{ o O{} m }{%
  \IfValueTF{#1}{%
    \prescript{#1}{#2}{\ddot{\matr{#3}}}%
  }{%
    \ddot{\matr{#3}}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ndotmatr}
% \cmd{\ddotmatr}\marg{num}\marg{matrix} writes |<matrix>| formatted as
% matrix with its |<num>|-th time-derivative indiciator.\\
% \cmd{\ddotmatr}\oarg{sub}\marg{num}\marg{matrix} prepends subscript |<sub>|.\\
% \cmd{\ddotmatr}\oarg{sub}\oarg{sup}\marg{num}\marg{matrix} also prepends
% superscript |<sup>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\ndotmatr}{ o O{} m m }{%
  \IfValueTF{#1}{%
    \prescript{#1}{#2}{\ndot{#3}{\matr{#4}}}%
  }{%
    \ndot{#3}{\matr{#4}}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\abs}
% \cmd{\abs}{value} wraps |<value>| in absolute-value bars.
%    \begin{macrocode}
\ifdefined\abs\else%
\DeclarePairedDelimiterX{\abs}[1]{\lvert}{\rvert}{%
  \ifblank{#1}{\:\cdot\:}{#1}
}%
\fi%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\norm}
% \cmd{\norm}{value} wraps |<value>| inside of vector norm bars.
%    \begin{macrocode}
\ifdefined\norm\else%
\DeclarePairedDelimiterX{\norm}[1]{\lVert}{\rVert}{%
  \ifblank{#1}{\:\cdot\:}{#1}%
}%
\fi%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\pnorm}
% \cmd{\pnorm}{value} wraps |<value>| inside of vector $p$-norm bars.
%    \begin{macrocode}
\ifdefined\pnorm\else%
\DeclarePairedDelimiterX{\pnorm}[1]{\lVert}{\rVert_{p}}{%
  \ifblank{#1}{\:\cdot\:}{#1}%
}%
\fi%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\twonorm}
% \cmd{\twonorm}{value} wraps |<value>| inside of vector $2$-norm bars.
%    \begin{macrocode}
\ifdefined\twonorm\else%
\DeclarePairedDelimiterX{\twonorm}[1]{\lVert}{\rVert_{2}}{%
  \ifblank{#1}{\:\cdot\:}{#1}%
}%
\fi%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\onenorm}
% \cmd{\onenorm}{value} wraps |<value>| inside of vector $1$-norm bars.
%    \begin{macrocode}
\ifdefined\onenorm\else%
\DeclarePairedDelimiterX{\onenorm}[1]{\lVert}{\rVert_{1}}{%
  \ifblank{#1}{\:\cdot\:}{#1}%
}%
\fi%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\maxnorm}
% \cmd{\maxnorm}{value} wraps |<value>| inside of vector $\infty$-norm bars.
%    \begin{macrocode}
\ifdefined\maxnorm\else%
\DeclarePairedDelimiterX{\maxnorm}[1]{\lVert}{\rVert_{\infty}}{%
  \ifblank{#1}{\:\cdot\:}{#1}%
}%
\fi%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\pow}
% \cmd{\pow}\marg{base} simple wrapper for $\langle base \rangle^{2}$.\\
% \cmd{\pow}*\marg{base} applies and auto-scales parentheses around |<base>|.\\
% \cmd{\pow}\oarg{power}\marg{base} uses |<power>| as exponent instead of
% the default $2$.
%    \begin{macrocode}
\ProvideDocumentCommand{\pow}{ s O{2} m }{%
  \IfBooleanTF{#1}{%
    \parentheses*{#3
    }^{#2}%
  }{%
    #3^{#2}%
  }
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\skewm}
% \cmd{\skewm}\marg{value} provides a paired delimiter for the skew-symmetric
% matrix of |<value>|
%    \begin{macrocode}
\ifdefined\skewm\else%
\DeclarePairedDelimiterX{\skewm}[1]{[}{]_{\mkern-2.5mu\times}}{#1}%
\fi
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dotp}
% \cmd{\dotp}\marg{left}\marg{right} dot-product of two values |<left>| and
% |<right>|\\
% \cmd{\dotp}*\marg{left}\marg{right} auto-scales the parentheses of the
% dot-product.
%    \begin{macrocode}
\ProvideDocumentCommand{\dotp}{ s m m }{%
  \def\dotp@inner{#2 \bullet #3}%
  \IfBooleanTF{#1}{%
    \parentheses*{\dotp@inner}%
  }{
    \dotp@inner%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\innerp}
% \cmd{\innerp}\marg{left}\marg{right} inner-product of two values |<left>|
% and |<right>|\\
% \cmd{\innerp}*\marg{left}\marg{right} auto-scales the parentheses of the
% inner-product.
%    \begin{macrocode}
\ProvideDocumentCommand{\innerp}{ s m m }{%
  \def\innerp@inner{\langle #2 \, , #3 \rangle}%
  \IfBooleanTF{#1}{%
    \overline{\innerp@inner}%
  }{%
    \innerp@inner%
  }%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\crossp}
% \cmd{\crossp}\marg{left}\marg{right} cross-product of two values |<left>|
% and |<right>|\\
% \cmd{\crossp}*\marg{left}\marg{right} auto-scales the parentheses of the
% cross-product.
%    \begin{macrocode}
\ProvideDocumentCommand{\crossp}{s o m m}{%
  \def\crossp@inner{#3 \times #4}%
  \IfBooleanTF{#1}{%
    \IfValueTF{#2}{
      \parentheses[#2]{\crossp@inner}%
    }{%
      \parentheses*{\crossp@inner}%
    }
  }{%
    \crossp@inner%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\outerp}
% \cmd{\outerp}\marg{left}\marg{right} outer-product of two values |<left>|
% and |<right>|\\
% \cmd{\outerp}*\marg{left}\marg{right} auto-scales the parentheses of the
% outer-product.
%    \begin{macrocode}
\ProvideDocumentCommand{\outerp}{ s m m }{%
  \def\outerp@inner{#2 \otimes #3}%
  \IfBooleanTF{#1}{%
    \parentheses*{\outerp@inner}%
  }{
    \outerp@inner%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dif}
%    \begin{macrocode}
\ProvideDocumentCommand{\dif}{ o }{%
  \operatorname{d}%
  \IfValueT{#1}{%
    _{#1}%
  }%
  \!%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\Dif}
%    \begin{macrocode}
\ProvideDocumentCommand{\Dif}{ o }{%
  \operatorname{D}%
  \IfValueT{#1}{%
    _{#1}%
  }%
  \!%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\pd}
% \cmd{\pd}\marg{base}\marg{op} writes partial derivative of |<base>| with
% respect to |<op>|.\\
% \cmd{\pd}\oarg{num}\marg{base}\marg{op} optionally displays the partial
% derivative as the |<num>|-th derivative.
%    \begin{macrocode}
\newcommand{\pd}[3][]{%
  \frac{ \partial{^{#1}}#2 }{ \partial{#3^{#1}} }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\tpd}
% \cmd{\tpd}\marg{base}\marg{op} writes partial derivative of |<base>| with
% respect to |<op>| in textstyle.\\
% \cmd{\tpd}\oarg{num}\marg{base}\marg{op} optionally displays the partial
% derivative as the |<num>|-th derivative.
%    \begin{macrocode}
\newcommand{\tpd}[3][]{%
  \mathinner{%
    \tfrac{ \partial{^{#1}}#2 }{ \partial{#3^{#1}} }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dpd}
% \cmd{\dpd}\marg{base}\marg{op} writes partial derivative of |<base>| with
% respect to |<op>| in displaystyle.\\
% \cmd{\dpd}\oarg{num}\marg{base}\marg{op} optionally displays the partial
% derivative as the |<num>|-th derivative.
%    \begin{macrocode}
\newcommand{\dpd}[3][]{%
  \mathinner{%
    \dfrac{ \partial{^{#1}}#2 }{ \partial{#3^{#1}} }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\md}
%    \begin{macrocode}
\newcommand{\md}[6]{%
  \frac{ \partial{^{#2}}#1 }{ \partial{#3^{#4}}\partial{#5^{#6}} }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\tmd}
%    \begin{macrocode}
\newcommand{\tmd}[6]{%
  \mathinner{%
    \tfrac{ \partial{^{#2}}#1 }{ \partial{#3^{#4}}\partial{#5^{#6}} }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dmd}
%    \begin{macrocode}
\newcommand{\dmd}[6]{%
  \mathinner{%
    \dfrac{ \partial{^{#2}}#1 }{ \partial{#3^{#4}}\partial{#5^{#6}} }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\od}
% \cmd{\od}\marg{base}\marg{op} writes ordinary derivative of |<base>| with
% respect to |<op>|.\\
% \cmd{\od}\oarg{num}\marg{base}\marg{op} optionally displays the ordinary
% derivative as the |<num>|-th derivative.
%    \begin{macrocode}
\newcommand{\od}[3][]{%
  \frac{ \dif{^{#1}}#2 }{ \dif{#3^{#1}} }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\tod}
% \cmd{\od}\marg{base}\marg{op} writes ordinary derivative of |<base>| with
% respect to |<op>| in textstyle.\\
% \cmd{\od}\oarg{num}\marg{base}\marg{op} optionally displays the ordinary
% derivative as the |<num>|-th derivative.
%    \begin{macrocode}
\newcommand{\tod}[3][]{%
  \mathinner{%
    \tfrac{ \dif{^{#1}}#2 }{ \dif{#3^{#1}} }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dod}
% \cmd{\od}\marg{base}\marg{op} writes ordinary derivative of |<base>| with
% respect to |<op>| in displaystyle.\\
% \cmd{\od}\oarg{num}\marg{base}\marg{op} optionally displays the ordinary
% derivative as the |<num>|-th derivative.
%    \begin{macrocode}
\newcommand{\dod}[3][]{%
  \mathinner{%
    \dfrac{ \dif{^{#1}}#2 }{ \dif{#3^{#1}} }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\td}
% \cmd{\td}\marg{op} write total differential of |<op>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\td}{ m }{%
  \dif{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\tol}
% \cmd{\tol} variable that describes a tolerance.
%    \begin{macrocode}
\ProvideDocumentCommand{\tol}{ }{%
  \varepsilon%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\threshold}
% \cmd{\threshold} variable that describes a threshold.
%    \begin{macrocode}
\ProvideDocumentCommand{\threshold}{ }{%
  \epsilon%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\residual}
% \cmd{\residual} vector residual of an algebraic expression or function.\\
% \cmd{\residual}* scalar residual of an algebraic expression or function.
%    \begin{macrocode}
\ProvideDocumentCommand{\residual}{ s }{%
  \IfBooleanTF{#1}{%
    e%
  }{%
    \vect{e}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\stepsize}
%    \begin{macrocode}
\ProvideDocumentCommand{\stepsize}{ }{%
  h%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\funcindex}
%    \begin{macrocode}
\ProvideDocumentCommand{\funcindex}{ }{%
  k%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\loopindex}
%    \begin{macrocode}
\ProvideDocumentCommand{\loopindex}{ }{%
  l%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\iterindex}
%    \begin{macrocode}
\ProvideDocumentCommand{\iterindex}{ }{%
  k%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\itervar}
%    \begin{macrocode}
\ProvideDocumentCommand{\itervar}{ s }{%
  \IfBooleanTF{#1}{%
    x%
  }{
    \vect{x}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\iterstep}
%    \begin{macrocode}
\ProvideDocumentCommand{\iterstep}{ s }{%
  \IfBooleanTF{#1}{%
    \Delta x%
  }{
    \Delta \vect{x}%
  }%
}%s
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\factorial}
%    \begin{macrocode}
\ProvideDocumentCommand{\factorial}{ m }{%
  #1!
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\pinv}
% \cmd{\pinv}\marg{base} pseudo-inverse of |<base>|.\\
% \cmd{\pinv}*\marg{base} add and auto-scale parentheses around |<base>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\pinv}{ s m }{%
  \IfBooleanTF{#1}{%
    \parentheses*{#2}%
  }{%
    #2%
  }%
  ^{+}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\quat}
% \cmd{\quat} quaternion vector.\\
% \cmd{\quat}* quaternion scalar.
%    \begin{macrocode}
\ProvideDocumentCommand{\quat}{ s }{%
  \IfBooleanTF{#1}{%
    \Theta%
  }{%
    \vect{\Theta}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dotquat}
% \cmd{\dotquat} first time-derivative of quaternion vector.\\
% \cmd{\dotquat}* first time-derivative of quaternion scalar.
%    \begin{macrocode}
\ProvideDocumentCommand{\dotquat}{ s }{%
  \IfBooleanTF{#1}{%
    \dot{\Theta}%
  }{%
    \dotvect{\Theta}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ddotquat}
% \cmd{\ddotquat} second time-derivative of quaternion vector.\\
% \cmd{\ddotquat}* second time-derivative of quaternion scalar.
%    \begin{macrocode}
\ProvideDocumentCommand{\ddotquat}{ s }{%
  \IfBooleanTF{#1}{%
    \ddot{\Theta}%
  }{%
    \ddotvect{\Theta}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\quatratemat}
% \cmd{\quatratemat} quaternion rate matrix.
%    \begin{macrocode}
\ProvideDocumentCommand{\quatratemat}{ }{%
  \matr{W}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\coordsys}
% \cmd{\coordsys}\marg{var} typesetter for coordinate system |<var>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\coordsys}{ m }{%
  \mathcal{K}_{ \ms{#1} }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\transform}
% \cmd{\transform}\marg{from}\marg{to} writes transformation matrix from
% frame |<from>| to frame |<to>|.\\
% \cmd{\transform}\oarg{var}\marg{from}\marg{to} uses |<var>| as variable
% for transformation matrix rather than the default $T$.
%    \begin{macrocode}
\ProvideDocumentCommand{\transform}{ O{T} m m }{%
  \matr[#2][#3]{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\discretenabla}
%    \begin{macrocode}
\ProvideDocumentCommand{\discretenabla}{}{%
  \overline{\nabla}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\vectset}
%    \begin{macrocode}
\ProvideDocumentCommand{\vectset}{ >{\SplitList{;}}m }{%
  \langle%
  {\ProcessList{#1}{\vectsetitem}}%
  \rangle%
}%
\newcommand\vectsetitem[1]{#1\let\vectsetitem\vectsetitema}
\newcommand\vectsetitema[1]{; #1}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\kronecker}
%    \begin{macrocode}
\ProvideDocumentCommand{\kronecker}{ O{i} O{j} }{%
  \delta_{#1#2}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dirac}
%    \begin{macrocode}
\ProvideDocumentCommand{\dirac}{ }{%
  \delta%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\const}
%    \begin{macrocode}
\ProvideDocumentCommand{\const}{ }{%
  \text{const}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\msconst}
%    \begin{macrocode}
\ProvideDocumentCommand{\msconst}{ }{%
  \ms{const}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\heaviside}
%    \begin{macrocode}
\ProvideDocumentCommand{\heaviside}{ g }{%
  H%
  \IfValueT{#1}{%
    \of{#1}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\polydeg}
%    \begin{macrocode}
\ProvideDocumentCommand{\polydeg}{ }{%
  d%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\Re}
%    \begin{macrocode}
\renewcommand{\Re}{\operatorname{Re}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\Im}
%    \begin{macrocode}
\renewcommand{\Im}{\operatorname{Im}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\transposesymbol}
%    \begin{macrocode}
\newcommand{\transposesymbol}{\mbox{\textscale{0.6}{$\top$}}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\transpose}
%    \begin{macrocode}
\ProvideDocumentCommand{\transpose}{ s O{\mkern-1.5mu} m }{%
  \IfBooleanTF{#1}{%
    \parentheses*{#3}^{#2\transposesymbol}%
  }{%
    #3^{#2\transposesymbol}%
  }%
  \mkern-1.0mu%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\conjugate}
%    \begin{macrocode}
\ProvideDocumentCommand{\conjugate}{ s m }{%
  \overline{#2}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\hermconjugate}
%    \begin{macrocode}
\ProvideDocumentCommand{\hermconjugate}{ s O{\mkern-1.5mu} m }{%
  \IfBooleanTF{#1}{%
    \parentheses*{#3}^{#2\mbox{\textscale{0.6}{$\mathsf{H}$}}}%
  }{%
    #3^{#2\mbox{\textscale{0.6}{$\mathsf{H}$}}}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\inv}
%    \begin{macrocode}
\ProvideDocumentCommand{\inv}{ s m }{%
  \IfBooleanTF{#1}{%
    \parentheses*{#2}^{-1}%
  }{%
    #2^{-1}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\evec}
%    \begin{macrocode}
\ProvideDocumentCommand{\evec}{ s O{e} m }{%
  \IfBooleanTF{#1}{%
    \vect{#2}_{\ms{#3}}%
  }{%
    \hat{ \vect{#2} }_{\ms{#3}}%
  }
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\evecx}
%    \begin{macrocode}
\ProvideDocumentCommand{\evecx}{ s O{e} }{%
  \IfBooleanTF{#1}{%
    \evec*[#2]{x}%
  }{%
    \evec[#2]{x}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\evecy}
%    \begin{macrocode}
\ProvideDocumentCommand{\evecy}{ s O{e} }{%
  \IfBooleanTF{#1}{%
    \evec*[#2]{y}%
  }{%
    \evec[#2]{y}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\evecz}
%    \begin{macrocode}
\ProvideDocumentCommand{\evecz}{ s O{e} }{%
  \IfBooleanTF{#1}{%
    \evec*[#2]{z}%
  }{%
    \evec[#2]{z}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arctant}
%    \begin{macrocode}
\ProvideDocumentCommand{\arctant}{ s o m m }{%
  \arctantwo\,%
  \IfBooleanTF{#1}{%
    \of*{#3, #4}%
  }{%
    \of{#3, #4}%
  }
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\irange}
%    \begin{macrocode}
\ProvideDocumentCommand{\irange}{s o m g}{%
  \def\runner{\IfValueTF{#4}{#4}{i}}%
  \IfValueTF{#2}{%
    \IfBooleanTF{#1}{%
      {\runner = \parentheses*{1, #2, \dotsc, #3}}%
    }{%
      {\runner = \parentheses{1, #2, \dotsc, #3}}%
    }%
  }{%
    \IfBooleanTF{#1}{%
      {\runner = \parentheses*{1, \dotsc, #3}}%
    }{%
      {\runner = \parentheses{1, \dotsc, #3}}%
    }%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ms}
%    \begin{macrocode}
\ProvideDocumentCommand{\ms}{ m }{%
  {\mbox{\textscale{0.6}{\mc{\smaller[1]#1}}}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\mc}
%    \begin{macrocode}
\ProvideDocumentCommand{\mc}{ m }{%
  \text{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotationsymbol}
%    \begin{macrocode}
\ProvideDocumentCommand{\rotationsymbol}{ }{%
  R%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotation}
%    \begin{macrocode}
\ProvideDocumentCommand{\rotation}{ o O{} }{%
  \IfValueTF{#1}{%
    \matr[#1][#2]{\rotationsymbol}%
  }{%
    \matr{\rotationsymbol}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\dotrotation}
%    \begin{macrocode}
\ProvideDocumentCommand{\dotrotation}{ o O{} }{%
  \IfValueTF{#1}{%
    \dotmatr[#1][#2]{\rotationsymbol}%
  }{%
    \dotmatr{\rotationsymbol}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ddotrotation}
%    \begin{macrocode}
\ProvideDocumentCommand{\ddotrotation}{ o O{} }{%
  \IfValueTF{#1}{%
    \ddotmatr[#1][#2]{\rotationsymbol}%
  }{%
    \ddotmatr{\rotationsymbol}%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotationx}
% \cmd{\rotationx} provices the rotation matrix about the $x$ axis.\\
% \cmd{\rotationx}\oarg{sub} preprends subscript |<sub>|.\\
% \cmd{\rotationx}\oarg{sub}\oarg{sup} also prepends superscript |<sup>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\rotationx}{ o O{} }{%
  \IfValueTF{#1}{%
    \rotation[#1][#2]%
  }{%
    \rotation%
  }_{\ms{x}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotationX}
% \cmd{\rotationX} provices the rotation matrix about the $X$ axis.\\
% \cmd{\rotationX}\oarg{sub} preprends subscript |<sub>|.\\
% \cmd{\rotationX}\oarg{sub}\oarg{sup} also prepends superscript |<sup>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\rotationX}{ o O{} }{%
  \IfValueTF{#1}{%
    \rotation[#1][#2]%
  }{%
    \rotation%
  }_{\ms{X}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotationy}
% \cmd{\rotationy} provices the rotation matrix about the $z$ axis.\\
% \cmd{\rotationy}\oarg{sub} preprends subscript |<sub>|.\\
% \cmd{\rotationy}\oarg{sub}\oarg{sup} also prepends superscript |<sup>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\rotationy}{ o O{} }{%
  \IfValueTF{#1}{%
    \rotation[#1][#2]%
  }{%
    \rotation%
  }_{\ms{y}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotationY}
% \cmd{\rotationY} provices the rotation matrix about the $Y$ axis.\\
% \cmd{\rotationY}\oarg{sub} preprends subscript |<sub>|.\\
% \cmd{\rotationY}\oarg{sub}\oarg{sup} also prepends superscript |<sup>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\rotationY}{ o O{} }{%
  \IfValueTF{#1}{%
    \rotation[#1][#2]%
  }{%
    \rotation%
  }_{\ms{Y}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotationz}
% \cmd{\rotationz} provices the rotation matrix about the $z$ axis.\\
% \cmd{\rotationz}\oarg{sub} preprends subscript |<sub>|.\\
% \cmd{\rotationz}\oarg{sub}\oarg{sup} also prepends superscript |<sup>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\rotationz}{ o O{} }{%
  \IfValueTF{#1}{%
    \rotation[#1][#2]%
  }{%
    \rotation%
  }_{\ms{z}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rotationZ}
% \cmd{\rotationZ} provices the rotation matrix about the $Z$ axis.\\
% \cmd{\rotationZ}\oarg{sub} preprends subscript |<sub>|.\\
% \cmd{\rotationZ}\oarg{sub}\oarg{sup} also prepends superscript |<sup>|.
%    \begin{macrocode}
\ProvideDocumentCommand{\rotationZ}{ o O{} }{%
  \IfValueTF{#1}{%
    \rotation[#1][#2]%
  }{%
    \rotation%
  }_{\ms{Z}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\imgu}
% \cmd{\imgu} imaginary unit
%    \begin{macrocode}
\ProvideDocumentCommand{\imgu}{ }{%
  {\imagu\mkern1mu}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\vertbar}
%    \begin{macrocode}
\ProvideDocumentCommand{\vertbar}{}{%
  \rule[-1ex]{0.5pt}{2.5ex}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\horzbar}
%    \begin{macrocode}
\ProvideDocumentCommand{\horzbar}{}{%
  \rule[.5ex]{2.5ex}{0.5pt}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\SO}
%    \begin{macrocode}
\ProvideDocumentCommand{\SO}{ O{3} }{%
  \mathop{\mathrm{SO}}\of{#1}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\bigo}
%    \begin{macrocode}
\ProvideDocumentCommand{\bigo}{ }{%
  \mathcal{O}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\diag}
% \cmd{\diag} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\diag}{diag}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\sign}
% \cmd{\sign} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\sign}{sign}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arctantwo}
% \cmd{\arctantwo} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\arctantwo}{atan2}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\imagu}
% \cmd{\imagu} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\imagu}{\mathrm{i}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\trace}
% \cmd{\trace} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\trace}{tr}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arcsec}
% \cmd{\arcsec} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\arcsec}{arcsec}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arccot}
% \cmd{\arccot} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\arccot}{arccot}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arccsc}
% \cmd{\arccsc} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\arccsc}{arccsc}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\sech}
% \cmd{\sech} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\sech}{sech}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\csch}
% \cmd{\csch} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\csch}{csch}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arcsinh}
% \cmd{\arcsinh} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\arcsinh}{arcsinh}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arccosh}
% \cmd{\arccosh} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\arccosh}{arccosh}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arctanh}
% \cmd{\arctanh} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\arctanh}{arctanh}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arcsech}
% \cmd{\arcsech} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\arcsech}{arcsech}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arccsch}
% \cmd{\arccsch} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\arccsch}{arccsch}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arccoth}
%    \begin{macrocode}
\DeclareMathOperator{\arccoth}{arccoth}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\arccoth}
% \cmd{\adj} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\adj}{adj}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rank}
% \cmd{\rank} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\rank}{rank}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\blkdiag}
% \cmd{\blkdiag} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\blkdiag}{blockdiag}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\vertcat}
% \cmd{\vertcat} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\vertcat}{vertcat}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\horzcat}
% \cmd{\horzcat} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\horzcat}{horzcat}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\jacobiansymbol}
% \cmd{\jacobiansymbol} provides the corresponding math operator
%    \begin{macrocode}
\DeclareMathOperator{\jacobiansymbol}{D}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\SIinterval}
%    \begin{macrocode}
\ProvideDocumentCommand{\SIinterval}{ O{} m m m }{%
  \interval[#1]{#2}{#3}\,\si{#4}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\SIset}
%    \begin{macrocode}
\ProvideDocumentCommand{\SIset}{ O{} m m }{%
  \SIlist[%
      open-bracket={\lbrace},%
      close-bracket={\rbrace},%
      list-separator={,},%
      list-pair-separator={,},%
      list-final-separator={,},%
      #1,%
    ]{#2}{#3}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\SIsetlist}
%    \begin{macrocode}
\ProvideDocumentCommand{\SIsetlist}{ O{} m m }{%
  \SIlist[%
      open-bracket={\lbrace},%
      close-bracket={\rbrace},%
      list-separator={,},%
      list-pair-separator={,\dots,},%
      list-final-separator={,\dots,},%
      #1,%
    ]{#2}{#3}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\numset}
%    \begin{macrocode}
\ProvideDocumentCommand{\numset}{ s O{} m }{%
  \def\nl{%
    \numlist[%
      open-bracket={\lbrace},%
      close-bracket={\rbrace},%
      list-separator={,},%
      list-pair-separator={,},%
      list-final-separator={,},%
      #2,%
    ]{#3}%
  }%
  \IfBooleanTF{#1}{%
    \left\{%
      \nl%
    \right\}
  }{%
    \{%
      \nl%
    \}%
  }%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\numsetlist}
%    \begin{macrocode}
\ProvideDocumentCommand{\numsetlist}{ s O{} m }{%
  \def\nl{%
    \numlist[%
      open-bracket={\lbrace},%
      close-bracket={\rbrace},%
      list-separator={\, ,},%
      list-pair-separator={\, , \dotsc ,},%
      list-final-separator={\, , \dotsc ,},%
      #2,%
    ]{#3}%
  }%
  \IfBooleanTF{#1}{%
    \left\{%
      \nl%
    \right\}
  }{%
    \{%
      \nl%
    \}%
  }%
}
%    \end{macrocode}
% \end{macro}
%
%
% \Finale
\endinput
